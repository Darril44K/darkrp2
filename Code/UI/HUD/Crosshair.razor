@namespace Dxura.Darkrp.UI
@inherits Panel
@attribute [StyleSheet]

@if ( !Player.IsValid() || !Player.CurrentEquipment.IsValid() )
{
	return;
}

<root>
	<div class="guide"/>

	@if ( IsFriendly )
	{
		<i class="cross">close</i>
	}
	else
	{
		
		@if ( !Equipment?.OnlyShowCrosshairDot ?? true )
		{
			<div @ref=" Left" class="left element"></div>
			<div @ref=" Right" class="right element"></div>
			<div @ref=" Top" class="top element"></div>
			<div @ref=" Bottom" class="bottom element"></div>
		}

		@if ( GameSettingsSystem.Current.ShowCrosshairDot )
		{
			<div @ref=" Dot" class="dot element"/>
		}
	}

	<div @ref=" Hitmarker" class="hitmarker @HitmarkerClasses"/>
</root>

@code
{
	public Panel Left { get; set; }
	public Panel Right { get; set; }
	public Panel Top { get; set; }
	public Panel Bottom { get; set; }
	public Panel Dot { get; set; }

	public Panel Hitmarker { get; set; }

	Player? Player => Player.Local.IsValid() ? Player.Local : null;
	Equipment? Equipment => Player.IsValid() ? Player.CurrentEquipment : null;

	private TimeUntil TimeUntilHitmarkerRemove = 0f;
	private float HitMarkerDuration => 0.1f;

	public static Crosshair Instance { get; set; }

	private bool IsFriendly { get; set; } = false;
	private bool IsEnemy { get; set; } = false;

	protected override void OnAfterTreeRender( bool firstTime )
	{
		if ( firstTime )
		{
			Instance = this;
		}
	}

	string HitmarkerClasses => !TimeUntilHitmarkerRemove ? "is-visible" : string.Empty;

	private ShootWeaponComponent Shoot => Equipment.IsValid() ? Equipment.Components.Get<ShootWeaponComponent>( FindMode.EnabledInSelfAndDescendants ) : null;
	private ScopeWeaponComponent Scope => Equipment.IsValid() ? Equipment.Components.Get<ScopeWeaponComponent>( FindMode.EnabledInSelfAndDescendants ) : null;
	private RecoilWeaponComponent Recoil => Equipment.IsValid() ? Equipment.Components.Get<RecoilWeaponComponent>( FindMode.EnabledInSelfAndDescendants ) : null;

	float BaseDistance => GameSettingsSystem.Current.CrosshairDistance;

	// 10px base size
	float BaseElementSize => GameSettingsSystem.Current.CrosshairLength;

	public void Trigger( DamageInfo damageInfo )
	{
		if ( Equipment is not { UseCrosshair: true } || Equipment.OnlyShowCrosshairDot )
		{
			return;
		}
		
		if ( damageInfo.Victim is Player victim && victim.IsValid() )
		{
			var hc = victim.HealthComponent;
			if ( !hc.IsValid() ) return;

			var isKill = hc.Health - damageInfo.Damage <= 0f;
			TimeUntilHitmarkerRemove = isKill ? 0.5f : 0.2f;
			Hitmarker.SetClass( "is-kill", isKill );
			Hitmarker.SetClass( "is-headshot", damageInfo.Hitbox.HasFlag( HitboxTags.Head ) );
		}
	}

	float VelocityScale => MathF.Abs( Player?.Spread ?? 0 ).Clamp( 0, 0.25f );
	float VelocityScaleFactor => 150;

	public float Distance => GetDistance();

	private float LerpedDistance = 15;
	private float SpreadDistance => (Player?.Spread ?? 0) * 250f;

	float GetDistance()
	{
		var dist = BaseDistance;

		if ( GameSettingsSystem.Current is not null && GameSettingsSystem.Current.DynamicCrosshair )
		{
			dist += SpreadDistance;

			// velocity
			dist += VelocityScale * VelocityScaleFactor;

			if ( Recoil.IsValid() )
			{
				dist += Recoil.Current.AsVector3().Length * 175;
			}
		}

		return dist;
	}

	Length? GetLength()
	{
		var size = BaseElementSize;

		if ( GameSettingsSystem.Current.DynamicCrosshair )
		{
			var dist = GetDistance() - (BaseDistance + SpreadDistance);
			size += dist * 0.2f;
		}

		return Length.Pixels( size );
	}

	void UpdateDistance()
	{
		if ( !Left.IsValid() ) return;

		LerpedDistance = LerpedDistance.LerpTo( Distance, Time.Delta * 7.5f );

		var length = GetLength();
		var distance = LerpedDistance + BaseElementSize;

		Left.Style.Left = -distance;
		Left.Style.Width = length;

		Right.Style.Left = distance;
		Right.Style.Width = length;

		Top.Style.Top = -distance;
		Top.Style.Height = length;

		Bottom.Style.Top = distance;
		Bottom.Style.Height = length;

		Left.Style.BackgroundColor = GameSettingsSystem.Current.CrosshairColor;
		Top.Style.BackgroundColor = GameSettingsSystem.Current.CrosshairColor;
		Bottom.Style.BackgroundColor = GameSettingsSystem.Current.CrosshairColor;
		Right.Style.BackgroundColor = GameSettingsSystem.Current.CrosshairColor;

		if ( Dot.IsValid() )
			Dot.Style.BackgroundColor = GameSettingsSystem.Current.CrosshairColor;
	}

	[ConVar( "darkrp_crosshair_override" )]
	public static bool CrosshairOverride { get; set; } = false;

	public override void Tick()
	{
		var player = Player;
		var visible = player.IsValid() && player.HealthComponent.State == LifeState.Alive && player.CameraMode == CameraMode.FirstPerson;

		if ( Equipment.IsValid() )
		{
			if ( Equipment.Tags.Has( "aiming" ) || !Equipment.UseCrosshair )
				visible = CrosshairOverride;
		}

		if ( player.IsValid() && player.IsInVehicle ) visible = false;

		SetClass( "visible", visible );

		if ( !player.IsValid() || !visible ) return;

		UpdateDistance();

		var currentTrace = player.CachedEyeTrace;
		if ( currentTrace.Hit && currentTrace.GameObject.IsValid() )
		{
			var targetPlayer = currentTrace.GameObject.Root.Components.Get<Player>();
			if ( targetPlayer.IsValid() )
			{
				const bool friendly = false;
				IsFriendly = friendly;
				IsEnemy = !friendly;
			}
			else
			{
				IsEnemy = false;
				IsFriendly = false;
			}

			SetClass( "enemy", IsEnemy );
			SetClass( "friendly", IsFriendly );
		}
		else
		{
			SetClass( "enemy", false );
			SetClass( "friendly", false );
		}
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( Time.Now );
	}
}
