@namespace Dxura.Darkrp.UI
@using System.Text.RegularExpressions
@using System.Threading.Tasks

@inherits Panel;

<root>
    <div class="prop-list">
        <button class="button" style="justify-content:center; margin-top:10px; margin-bottom:20px; background-color:maroon;" onclick=@RemoveAllProps>
            Remove all my props (Press "Z" to undo props)
        </button>

        <div class="section-title">Props: @PropManager.Instance.PropCount() / @PropManager.Instance.PropLimit</div>

        <div class="section-title">Local</div>
        <div style="flex-direction: row; flex-wrap:wrap;">
            @if (PropManager.Instance.Props is { Count: > 0 })
            {
                @foreach (var model in PropManager.Instance.Props)
                {
                    var propName = model.Name;
                    var propThumbnailPath = PropManager.GetPropThumbnail(propName);

                    <div style="padding:8px;">
                        <div class="button" onclick=@(() => SpawnProp(propName)) 
                             style="background-image: url('@propThumbnailPath'); background-size: cover; width:150px; height:150px; margin: 10px;">
                        </div>
                    </div>
                }
            }
            else
            {
                <div>No local props found</div>
            }
        </div>

        <div class="section-title">Cloud</div>
        <div style="margin-top: 10px; margin-bottom: 10px; width: 50%">

	        <div style="width: 50%">
		        <TextEntry placeholder="Query..."  Value:bind="@SearchQuery" />
	        </div>
	        <button class="button" onclick="@(() => PerformSearch(SearchQuery))">Search</button>
        </div>
        <p>(Click enter to escape textbox, click search to query)</p>
        <div style="flex-direction: row; flex-wrap:wrap; margin-top: 20px;">
            @if (CloudPackages is { Count: > 0 })
            {
                @foreach (var package in CloudPackages)
                {
                    var thumbnailPath = package.Thumb;

                    <div class="button" onclick=@(() => SpawnCloudProp(package.FullIdent)) 
                         style="background-image: url(@thumbnailPath); background-size: cover; width:150px; height:150px; margin: 10px;">
                    </div>
                }
            }
            else
            {
                <h1>@(IsLoading ? "Loading..." : "No cloud models found")</h1>
            }
        </div>
    </div>
</root>

@code {
    private List<Package> CloudPackages { get; set; } = new();
    private string SearchQuery { get; set; } = "";
    private bool IsLoading { get; set; }

    private async Task PerformSearch(string query)
    {
	    CloudPackages.Clear();
        IsLoading = true;
        StateHasChanged();
        
        if ( string.IsNullOrEmpty( query ) )
        {
	        return;
        }


        try
        {
            var result = await Package.FindAsync(query);
            if (result is { Packages: not null })
            {
                CloudPackages = result.Packages.Where( x => x.PackageType == Package.Type.Model ).ToList();
            }
            else
            {
                Log.Warning("No packages found matching the query.");
                CloudPackages = new List<Package>();
            }
        }
        catch (Exception ex)
        {
            Log.Error($"Failed to load cloud packages: {ex.Message}");
            CloudPackages = new List<Package>();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    void SpawnProp(string modelName)
    {
        Log.Info(modelName);
        PropManager.Instance.SpawnProp(modelName, false);
    }

    async Task SpawnCloudProp(string fullIdent)
    {
        try
        {
            var package = await Package.FetchAsync(fullIdent, true);

            if (package != null)
            {
	            PropManager.Instance.SpawnProp(fullIdent, true);
            }
            else
            {
                Log.Warning($"Could not fetch package with identifier: {fullIdent}");
            }
        }
        catch (Exception ex)
        {
            Log.Error($"Failed to spawn cloud model: {ex.Message}");
        }
    }

    void RemoveAllProps()
    {
        PropManager.Instance.RemoveAllProps();
    }
    
    protected override void OnAfterTreeRender( bool firstTime )
    {
	    if ( !firstTime ) return;
		
	    try
	    {
		    // Load Cloud Packages (Top)
		    _ = PerformSearch("model");
	    }
	    catch (Exception ex)
	    {
		    Log.Error($"Failed to initialize: {ex.Message}");
	    }
    }

    protected override int BuildHash() => System.HashCode.Combine(PropManager.Instance.PropCount());
}
